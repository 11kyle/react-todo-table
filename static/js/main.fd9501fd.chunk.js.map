{"version":3,"sources":["Components/TableHeader.js","Components/TableBody.js","Components/Table.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","className","scope","colSpan","TableBody","props","rows","characters","map","row","index","key","name","job","onClick","removeCharacter","Table","Components_TableHeader","Components_TableBody","this","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","event","_event$target","target","value","setState","defineProperty","onSubmit","preventDefault","state","initialState","type","required","App","filter","character","i","concat","toConsumableArray","Components_Form","Components_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd9501fd.chunk.js","sourcesContent":["import React from 'react';\n\nconst TableHeader = () => {\n  return (\n    <thead className=\"thead-dark\">\n      <tr>\n        <th scope=\"col\">Name</th>\n        <th scope=\"col\" colSpan=\"2\">Job</th>\n      </tr>\n    </thead>\n  );\n}\n\nexport default TableHeader;\n","import React from 'react';\n\nconst TableBody = (props) => {\n  const rows = props.characters.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => props.removeCharacter(index)}>\n            Delete\n          </button>\n        </td>\n      </tr>\n    );\n  });\n  return (\n    <tbody>{rows}</tbody>\n  );\n}\n\nexport default TableBody;\n","import React, { Component } from 'react';\nimport TableHeader from './TableHeader';\nimport TableBody from './TableBody';\n\nclass Table extends Component {\n  render() {\n    return (\n      <table className=\"table\">\n        <TableHeader />\n        <TableBody\n          characters={this.props.characters}\n          removeCharacter={this.props.removeCharacter}\n        />\n      </table>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    this.initialState = {\n      name: '',\n      job: ''\n    };\n\n    this.state = this.initialState;\n  }\n\n  onChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  onSubmit = event => {\n    event.preventDefault();\n    this.props.onSubmit(this.state);\n    this.setState(this.initialState);\n  }\n\n  render() {\n    return (\n      <form\n        className=\"mt-2 mb-2\"\n        onSubmit={this.onSubmit}\n      >\n        <div className=\"row\">\n          <div className=\"col\">\n            <label>Name</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              onChange={this.onChange}\n              required\n            />\n          </div>\n          <div className=\"col\">\n            <label>Job</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              name=\"job\"\n              value={this.state.job}\n              onChange={this.onChange}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"row mt-2\">\n          <div className=\"col\">\n            <input\n              className=\"btn btn-success\"\n              type=\"submit\"\n              value=\"Submit\"\n            />\n          </div>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport Table from './Components/Table';\nimport Form from './Components/Form';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    characters: [\n      {\n          'name': 'Charlie',\n          'job': 'Janitor'\n      },\n      {\n          'name': 'Mac',\n          'job': 'Bouncer'\n      },\n      {\n          'name': 'Dee',\n          'job': 'Aspring actress'\n      },\n      {\n          'name': 'Dennis',\n          'job': 'Bartender'\n      }\n    ]\n  };\n\n  removeCharacter = index => {\n    this.setState({\n      characters: this.state.characters.filter((character, i) => {\n        return i !== index;\n      })\n    });\n  }\n\n  onSubmit = (character) => {\n    this.setState({\n      characters: [...this.state.characters, character]\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Form onSubmit={this.onSubmit}/>\n        <Table\n          characters={this.state.characters}\n          removeCharacter={this.removeCharacter}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}